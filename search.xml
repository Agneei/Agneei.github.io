<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Vue.js学习笔记（二）</title>
    <url>/2020/03/04/blog05/</url>
    <content><![CDATA[<h2 id="Vue-js的练习之：用户管理"><a href="#Vue-js的练习之：用户管理" class="headerlink" title="Vue.js的练习之：用户管理"></a>Vue.js的练习之：用户管理</h2><a id="more"></a>
<h3 id="问题一："><a href="#问题一：" class="headerlink" title="问题一："></a>问题一：</h3><p><strong>button</strong> 按钮会导致页面的刷新：<code>&lt;button class=&quot;btn btn-primary&quot; &gt;添加&lt;/button&gt;</code><br>这样造成的直接后果是，添加之后页面自动刷新，添加的用户会丢失。<br>因此解决办法一：用<code>&lt;input type=&quot;button&quot; /&gt;</code>代替。<br>解决办法二：直接在<code>&lt;button&gt;</code>中添加<code>type=&quot;button&quot;</code></p>
]]></content>
      <categories>
        <category>Vue.js学习笔记</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js学习笔记（一）</title>
    <url>/2020/02/29/blog04/</url>
    <content><![CDATA[<h2 id="Vue-js中常用指令"><a href="#Vue-js中常用指令" class="headerlink" title="Vue.js中常用指令"></a>Vue.js中常用指令</h2><a id="more"></a>
<h3 id="1-什么是指令？"><a href="#1-什么是指令？" class="headerlink" title="1.什么是指令？"></a>1.什么是指令？</h3><h4 id="用来扩展html标签的功能"><a href="#用来扩展html标签的功能" class="headerlink" title="用来扩展html标签的功能"></a>用来扩展html标签的功能</h4><pre><code>angular中常用的指令：
    ng-model
    ng-repeat
    ng-click
    ng-show/ng-hide
    ng-if</code></pre><h3 id="2-vue中常用的指令"><a href="#2-vue中常用的指令" class="headerlink" title="2.vue中常用的指令"></a>2.vue中常用的指令</h3><ul>
<li>v-model<br>  双向数据绑定，一般用于表单元素</li>
<li>v-for<br>  对数组或对象进行循环操作，使用的是v-for，不是v-repeat<br>  注：在vue1.0中提供了隐式变量，如$index、$key在vue2.0中去除了隐式变量，已被废除</li>
<li>v-on<br>  用来绑定事件，用法：v-on:事件=”函数”</li>
<li>v-show/v-if<br>  用来显示或隐藏元素，v-show是通过display实现，v-if是每次删除后再重新创建，与angular中类似</li>
</ul>
]]></content>
      <categories>
        <category>Vue.js学习笔记</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>2048小游戏（不完整）</title>
    <url>/2019/05/22/blog03/</url>
    <content><![CDATA[<h2 id="jQuery写2048中遇到的小问题记录"><a href="#jQuery写2048中遇到的小问题记录" class="headerlink" title="jQuery写2048中遇到的小问题记录"></a>jQuery写2048中遇到的小问题记录</h2><a id="more"></a>
<p>如下：</p>
<h4 id="1-不要漏写-‘-’-或-‘-’-这样的“小玩意儿”。"><a href="#1-不要漏写-‘-’-或-‘-’-这样的“小玩意儿”。" class="headerlink" title="1.不要漏写 ‘#’ 或 ‘.’ 这样的“小玩意儿”。"></a>1.不要漏写 ‘#’ 或 ‘.’ 这样的“小玩意儿”。</h4><h4 id="2-var-arr-new-Array-这玩意儿webstorm一直给我报错，"><a href="#2-var-arr-new-Array-这玩意儿webstorm一直给我报错，" class="headerlink" title="2.var arr=new Array() 这玩意儿webstorm一直给我报错，"></a>2.<strong><em>var arr=new Array()</em></strong> 这玩意儿webstorm一直给我报错，</h4><p><img src="https://img-blog.csdnimg.cn/20190517202044305.png" alt="图片勿转"><br>一直想不出哪里有问题，后来知道了：</p>
<ul>
<li>用new关键字去内存开辟一个存储地址比较耗资源,耗内存</li>
<li>而字面量方式直接在内存开辟一个存储字段相对简单,不耗资源</li>
</ul>
<p>所以应该直接写成这样 ：<strong><em>var arr = [ ]</em></strong> ;</p>
<p><strong>5.19更新：</strong><br>结果没啥问题了，三四天做完了，还上传到了github，（嘿嘿(●ˇ∀ˇ●)。。。<br>贼方便！然后就贴上地址啦：<a href="https://agneei.github.io/2048-game.github.io/" target="_blank" rel="noopener">快来玩小游戏啦，停不下来~</a></p>
<p>over~（(￣▽￣)”<br>（ps:这是pc端的）</p>
<p><strong>5.22更新：</strong><br>移动端已更。</p>
<p><strong>5.25</strong><br>略作修剪。</p>
]]></content>
      <categories>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>2048小游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>前端小白要知道的小技巧</title>
    <url>/2018/12/07/blog02/</url>
    <content><![CDATA[<h2 id="如何使用webstorm提高敲代码速度"><a href="#如何使用webstorm提高敲代码速度" class="headerlink" title="如何使用webstorm提高敲代码速度"></a>如何使用webstorm提高敲代码速度</h2><a id="more"></a>
<p><strong>哒哒哒</strong> ：本来以为用webstorm就已经很方便打代码了，殊不知原来还隐藏这种操作！Σ(っ °Д °;)っ<br><strong>如下：</strong></p>
<h3 id="1-快速建立html格式"><a href="#1-快速建立html格式" class="headerlink" title="1.快速建立html格式"></a>1.快速建立html格式</h3><ul>
<li>居然仅需 !+Tab ！！！</li>
<li>以及 html + Tab<br>就能快速创好格式了（赞b(￣▽￣)d</li>
</ul>
<h3 id="2-轻松添加id、class、文本和属性"><a href="#2-轻松添加id、class、文本和属性" class="headerlink" title="2.轻松添加id、class、文本和属性"></a>2.轻松添加id、class、文本和属性</h3><ul>
<li><p>连续输入p.bar，就会出现：<br><img src="https://img-blog.csdnimg.cn/20190515210239155.png" alt="无描述"></p>
</li>
<li><p>类似地，输入h1{foo}和a[#]   （亲测<br><img src="https://img-blog.csdnimg.cn/20190515210501614.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190515210916223.png" alt="在这里插入图片描述"></p>
</li>
</ul>
<h3 id="3-嵌套"><a href="#3-嵌套" class="headerlink" title="3.嵌套"></a>3.嵌套</h3><blockquote>
<p>：子元素符号，表示嵌套的元素<br>       +：同级标签符号<br>       ^：可以使该符号前的标签提升一行 </p>
</blockquote>
<h3 id="4-分组"><a href="#4-分组" class="headerlink" title="4.分组"></a>4.分组</h3><ul>
<li>输入(.foo&gt;h1)+(.bar&gt;h2)：<br><img src="https://img-blog.csdnimg.cn/20190515211713488.png" alt="在这里插入图片描述"></li>
</ul>
<h3 id="5-定义多个元素"><a href="#5-定义多个元素" class="headerlink" title="5.定义多个元素"></a>5.定义多个元素</h3><ul>
<li>输入ul&gt;li*3,会出现：<br><img src="https://img-blog.csdnimg.cn/2019051521184151.png" alt="在这里插入图片描述"></li>
</ul>
<p>好了就到这里了(●’◡’●)</p>
<p>。。哦对了Sublime也一样适用哦~</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>C的合法标识符</title>
    <url>/2018/11/30/blog01/</url>
    <content><![CDATA[<h2 id="“一个简单的问题”"><a href="#“一个简单的问题”" class="headerlink" title="“一个简单的问题”"></a>“一个简单的问题”</h2><a id="more"></a>
<p>又碰到字符串问题，经常在这上面出错，今天借这道题统一整理一下。</p>
<ul>
<li>字符串输入函数gets();<br>  <em>gets()函数从标准输入（键盘）读入一行数据，所谓读取一行，就是遇到换行符就返回。<em>gets()函数并不读取换行符’\n’，它会把换行符替换成空字符’\0’</em>，作为c语言字符串结束的标志(与scanf不同的是，scanf()遇到空格就结束输入，后面的不算)。</em></li>
<li>字符串输出函数puts();<br>  *puts()函数用来向标准输出设备（屏幕）输出字符串并换行。<br>回到题目：<br><img src="https://img-blog.csdnimg.cn/20181130201600216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg0OTQzMA==,size_16,color_FFFFFF,t_70" alt="2024">代码如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,i,j;</span><br><span class="line">    int flag;</span><br><span class="line">    char a[50];</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    getchar();</span><br><span class="line">    while(n--)&#123;</span><br><span class="line">  gets(a);</span><br><span class="line">  flag&#x3D;0;</span><br><span class="line">  if((a[0]&gt;&#x3D;65&amp;&amp;a[0]&lt;&#x3D;90)||(a[0]&gt;&#x3D;97&amp;&amp;a[0]&lt;&#x3D;122)||a[0]&#x3D;&#x3D;&#39;_&#39;)</span><br><span class="line">  &#123;</span><br><span class="line">   for(i&#x3D;1;a[i]!&#x3D;&#39;\0&#39;;i++)</span><br><span class="line">   &#123;</span><br><span class="line">    if((a[i]&gt;&#x3D;65&amp;&amp;a[i]&lt;&#x3D;90)||(a[i]&gt;&#x3D;97&amp;&amp;a[i]&lt;&#x3D;122)||(a[i]&gt;&#x3D;48&amp;&amp;a[i]&lt;&#x3D;57)||a[i]&#x3D;&#x3D;&#39;_&#39;)</span><br><span class="line">     flag&#x3D;1;</span><br><span class="line">    else&#123;</span><br><span class="line">     flag&#x3D;-1;</span><br><span class="line">     break;&#x2F;&#x2F;这里注意遇到非法标识符结束，否则会被覆盖。</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   if(flag&#x3D;&#x3D;1)</span><br><span class="line">    printf(&quot;yes\n&quot;);</span><br><span class="line">   else</span><br><span class="line">    printf(&quot;no\n&quot;);</span><br><span class="line"> &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>补充getchar()函数：<br><code>当用户键入回车之后,getchar才开始从stdio流中每次读入一个字符.getchar函数的返回值是用户输入的第一个字符的ASCII码,如出错返回-1,且将用户输入的字符回显到屏幕.如用户在按回车之前输入了不止一个字符,其他字符会保留在键盘缓存区中,等待后续getchar调用读取.也就是说,后续的getchar调用不会等待用户按键,而直接读取缓冲区中的字符,直到缓冲区中的字符读完为后,才等待用户按键.</code><br>字符串其他问题会继续探索。</li>
</ul>
]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
</search>
